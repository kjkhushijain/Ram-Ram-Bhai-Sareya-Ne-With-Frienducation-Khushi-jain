
class disjoint{
    vector<int> rank, size, parent;
    public:
        disjoint(int n){
            rank.resize(n+1,0);
            parent.resize(n+1);
            size.resize(n+1,0);
            for(int i=0;i<n;i++){
                parent[i]=i;
            }
        }
        int findparent(int node){
            if(node==parent[node]) return node;
            return parent[node]=findparent(parent[node]);
        }
        
        void unionbyrank(int u, int v){
            int ulp_u=findparent(u);
            int ulp_v=findparent(v);
            if(ulp_u==ulp_v) return;
            if(rank[ulp_u]>rank[ulp_v]){
                parent[ulp_v]=ulp_u;
            }
            else if(rank[ulp_u]<rank[ulp_v]){
                parent[ulp_u]=ulp_v;
            }
            else{
                parent[ulp_u]=ulp_v;
                rank[ulp_v]++;
            }
        }
        
        void unionbysize(int u, int v){
            int ulp_u=findparent(u);
            int ulp_v=findparent(v);
            if(ulp_u==ulp_v) return;
            if(size[ulp_u]<size[ulp_v]){
                parent[ulp_u]=ulp_v;
                size[ulp_v]+=size[ulp_u];
            }
            else{
                parent[ulp_v]=ulp_u;
                size[ulp_u]+=size[ulp_v];
            }
            
        }
};

class Solution {
public:
    int findCircleNum(vector<vector<int>>& isConnected) {
       int n =isConnected.size();
        disjoint ds(n);
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(isConnected[i][j]==1){
                    ds.unionbysize(i,j);
                }
            }
        }
        int cnt=0;
        for(int i=0;i<n;i++){
            if(ds.findparent(i)==i) cnt++;
        }
        return cnt;
    }
};
